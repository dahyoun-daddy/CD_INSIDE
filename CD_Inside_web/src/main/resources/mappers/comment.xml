<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sist.cd.mappers.comment">

<!-- 서비스단에서 시퀀스를 주입시켜준다.  -->
	<select id="COMM_SEQ" resultType="int">
		SELECT COMM_SEQ.NEXTVAL as cnt 
		  FROM DUAL
	</select>

<!-- 서비스단에서 시퀀스를 주입시켜준다.  -->
	<select id="COMM_CODE_SEQ" resultType="int">
		SELECT COMM_CODE_SEQ.NEXTVAL as cnt 
		  FROM DUAL
	</select>

<!-- 서비스단에서 시퀀스를 주입시켜준다.  -->
	<select id="GROUP_SEQ" resultType="int">
		SELECT GROUP_SEQ.NEXTVAL as cnt 
		  FROM DUAL
	</select>
 
	<!-- commTextNum 과 group_seq 는 시퀀스로 처리 -->
	<insert id="add" parameterType="CommentVO">
		INSERT INTO comm (
					 comm_text_num,
					 b_num,
					 comm_cont,
					 user_id,
					 comm_hit,
					 comm_group_no,
					 comm_depth,
					 reg_dt,
					 mod_id,
					 mod_dt
		) VALUES (
				    #{commTextNum},
					 #{bNum},
					 #{commCont},
					 #{userId},
					 0,
					 #{commGroupNo},
					 0,
					 sysdate,
					 #{modId},
					 sysdate
		)
	</insert>

	<insert id="addreply" parameterType="CommentVO">
		INSERT INTO comm (
					 comm_text_num,
					 b_num,
					 comm_cont,
					 user_id,
					 comm_hit,
					 comm_group_no,
					 comm_depth,
					 reg_dt,
					 mod_id,
					 mod_dt
		) VALUES (
					 #{commTextNum},
					 #{bNum},
					 #{commCont},
					 #{userId},
					 0,
					 #{commGroupNo},
					 1,
					 sysdate,
					 #{modId},
					 sysdate
		)
	</insert>

	<!-- 삭제 -->
	<delete id="delete" parameterType="CommentVO">
		DELETE 
		  FROM comm
		WHERE comm_text_num = #{commTextNum}
	</delete>
	
		<!--대댓글 완전 삭제 -->
	<delete id="deleteAll" parameterType="CommentVO">
		DELETE 
		  FROM comm
		WHERE COMM_GROUP_NO = #{commGroupNo}
	</delete>

	<!-- 단건 조회 -->
	<select id="get" parameterType="CommentVO"
		resultType="CommentVO">
		SELECT COMM_TEXT_NUM,
				B_NUM,
				COMM_CONT,
				USER_ID,
				COMM_HIT,
				COMM_GROUP_NO,
				COMM_DEPTH,
				REG_DT,
				MOD_ID,
				MOD_DT
				FROM COMM
		WHERE COMM_TEXT_NUM = #{commTextNum}
	</select>

	<update id="update">
		UPDATE comm
		SET COMM_CONT = #{commCont},
		    MOD_DT = sysdate
		WHERE COMM_TEXT_NUM = #{commTextNum}
	</update>
	<!-- select list -->
	<select id="do_retrieve" parameterType="CommentVO"
		resultType="CommentVO">
		SELECT X.*,Y.*
		FROM(
		SELECT T.COMM_TEXT_NUM,
				T.B_NUM,
				T.COMM_CONT,
				T.USER_ID,
				T.COMM_HIT,
				T.COMM_GROUP_NO,
				T.COMM_DEPTH,
       			CASE WHEN to_char(T.reg_dt,'YYYY/MM/DD')=to_char(sysdate,'YYYY/MM/DD')
	                 THEN to_char(T.reg_dt,'HH24:MI')                                 
	       		ELSE to_char(T.reg_dt,'YYYY/MM/DD HH24:MI') end  reg_dt,
				T.MOD_ID,
				T.MOD_DT,
				T.rnum AS no
		FROM( 
		SELECT hr.*
		,ROW_NUMBER() OVER(ORDER BY comm_group_no,REG_DT ) AS rnum
		FROM COMM hr
		WHERE B_NUM = #{bNum}
		) T
		WHERE rnum BETWEEN (#{page_size} * (#{page_num}-1)+1)
		AND (#{page_size} * (#{page_num}-1)+#{page_size})
		)X
		NATURAL JOIN
		(
		SELECT COUNT(*) AS total_cnt
		  FROM COMM
		 WHERE B_NUM = #{bNum}
		--WHERE
		)Y
	</select>
	
		<!-- select list -->
	<select id="scroll_retrieve" parameterType="CommentVO" resultType="CommentVO">
SELECT C.*,Y.*
  FROM (
        SELECT BB.*
          FROM (SELECT X.*,
                       ROW_NUMBER() OVER(ORDER BY CASE WHEN USER_ID = #{userId} THEN USER_ID END ASC,COMM_HIT desc,REG_DT desc ) AS rnum
                  FROM(
                        SELECT T.COMM_TEXT_NUM,
                               T.B_NUM,
                               T.COMM_CONT,
                               T.USER_ID,
                               T.COMM_HIT,
                               T.COMM_GROUP_NO,
                               T.COMM_DEPTH,
                               T.reg_dt,
                               T.MOD_ID,
                               T.MOD_DT,
                               T.commentNo AS commentNo
                        FROM(
                              SELECT hr.* 
                                    ,COUNT(*) OVER(PARTITION BY COMM_GROUP_NO )-1 AS commentNo
                              FROM COMM hr
                              WHERE B_NUM = 1
                        ) T
                              WHERE COMM_DEPTH = 0
                )X
          )BB
       WHERE rnum BETWEEN (#{page_size} * (#{page_num}-1)+1) AND (#{page_size} * (#{page_num}-1)+#{page_size})
)C
NATURAL JOIN
(
		SELECT COUNT(*) AS total_cnt
		  FROM COMM
		 WHERE B_NUM = 1
		--WHERE
)Y
	</select>

		<!-- select list -->
	<select id="scroll_reply_retrieve" parameterType="CommentVO" resultType="CommentVO">
SELECT C.*,Y.*
  FROM (
        SELECT BB.*
          FROM (SELECT X.*,
                       ROW_NUMBER() OVER(ORDER BY CASE WHEN USER_ID = #{userId} THEN USER_ID END ASC,COMM_HIT desc,REG_DT desc ) AS rnum
                  FROM(
                        SELECT T.COMM_TEXT_NUM,
                               T.B_NUM,
                               T.COMM_CONT,
                               T.USER_ID,
                               T.COMM_HIT,
                               T.COMM_GROUP_NO,
                               T.COMM_DEPTH,
                               T.reg_dt,
                               T.MOD_ID,
                               T.MOD_DT,
                               T.commentNo AS commentNo
                        FROM(
                              SELECT hr.* 
                                    ,COUNT(*) OVER(PARTITION BY COMM_GROUP_NO )-1 AS commentNo
                              FROM COMM hr
                              WHERE B_NUM = 1
                        ) T
                              WHERE COMM_DEPTH = 1
                                AND COMM_GROUP_NO = #{commGroupNo}
                )X
          )BB
       WHERE rnum BETWEEN (#{page_size} * (#{page_num}-1)+1) AND (#{page_size} * (#{page_num}-1)+#{page_size})
)C
NATURAL JOIN
(
		SELECT COUNT(*) AS total_cnt
		  FROM COMM
		 WHERE B_NUM = 1
          AND COMM_GROUP_NO = #{commGroupNo}
)Y
	</select>


	<select id="do_code_getCount" parameterType="CommentVO"
		resultType="int">
		SELECT count(*) as cnt
		  FROM comm_code
		 WHERE comm_text_num = #{commTextNum}
		   AND user_id = #{userId}
	</select>

<!-- comm_code_seq.nextval -->
	<insert id="do_code_insert" parameterType="CommentVO">
		INSERT INTO comm_code (
					  comm_code_seq,
				      comm_text_num,
					  user_id
		) VALUES (
					  #{no},
					  #{commTextNum},
					  #{userId}
		)
	</insert>
	
	<update id="do_hit" parameterType="CommentVO">
		UPDATE COMM	
		   SET COMM_HIT = COMM_HIT + 1
		 WHERE COMM_TEXT_NUM = #{commTextNum}
	</update>
	


</mapper>